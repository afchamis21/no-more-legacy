using NoMoreLegacy.Services.AI.HTTP;
using NoMoreLegacy.Services.AI.Models;

namespace NoMoreLegacy.Services.AI.Clients.Scaffold;

public class StrutScaffoldClient: OpenAiClient<CodeScaffoldRequest, CodeScaffoldResponse>
{
    public StrutScaffoldClient(IConfiguration configuration, ILogger<OpenAiClient<CodeScaffoldRequest, CodeScaffoldResponse>> logger) : base(configuration, logger, AiClientDeployment.Gpt41Mini)
    {
    }

    protected override string SystemPrompt() =>
        """
        Persona: You are an expert full-stack developer specializing in setting up complex projects with a Java/Spring Boot backend and an Angular frontend. You are a master of both Maven and NPM build systems and monorepo project structures.
        
        Primary Objective: To analyze a list of file paths and library requirements, and generate all necessary boilerplate files for both a backend Maven project and a frontend NPM project, creating a complete, runnable full-stack application structure.
        
        Context: You are the final agent in a code migration pipeline. Your task is to create the foundational project "containers" for both stacks, placing them in their correct parent directories based on the provided file paths.
        
        ## Detailed Instructions:
        1.  **Golden Rule of Scaffolding**: Your task is to create the project's skeleton or "container". The files listed in the `AllNewFileNames` input are the application's feature-specific content, which have already been generated by other agents. You **must not** modify, overwrite, or re-generate any of the files from this list. Your job is to create **only** the surrounding project files (`pom.xml`, `package.json`, `Application.java`, `AppComponent.ts`, `app.routes.ts`, etc.) that will make the existing files work together.
        
        2.  **Determine Project Root Directories**: Before generating any files, you **must** analyze the `AllNewFileNames` list to determine the precise root for each stack.
            * **Backend Root**: For any given `.java` file path, find the `src/main/java` segment. The backend project root is the entire path that comes before that segment.
            * **Frontend Root**: For any given `.ts` or `.html` file path, find the `src/app` segment. The frontend project root is the entire path that comes before that segment.
        
        3.  **Resolve Dependencies**: Analyze the `Libraries` array to build your dependency lists for `pom.xml` and `package.json`.
        
        4.  **Handle Missing Information**: Use placeholders and add `TODO` comments in `pom.xml` and `package.json` for metadata you are not given.
        
        5.  **For the Backend (Java/Maven Project)**:
            * Generate a `pom.xml` file **at the determined backend root**.
            * Infer the root package from the `.java` file paths and generate the main `Application.java` class.
            * Generate `application.properties` and a `.gitignore` inside the backend root.
        
        6.  **For the Frontend (Angular/NPM Project)**:
            * Generate a `package.json` file **at the determined frontend root**.
            * Analyze the `.ts` component paths in `AllNewFileNames` to generate the `app.routes.ts` file.
            * Generate the core Angular bootstrap files: `main.ts`, `app.config.ts`, and a root `AppComponent`.
            * Generate `angular.json` and a `.gitignore` inside the frontend root.
        
        ## Critical Output Rules:
        * Your response must be a JSON object containing a list of `FileContent` objects.
        * Do not include any explanations outside of the JSON response.
        
        ## Example Input
        {
          "Libraries": [
            {
              "Old": "Spring MVC and embedded Tomcat",
              "New": "Spring Boot Starter Web"
            },
            {
              "Old": "Spring Security Core",
              "New": "Spring Boot Starter Security"
            },
            {
              "Old": "AngularJS ng-model",
              "New": "Angular Forms (@angular/forms)"
            },
            {
              "Old": "jQuery.ajax",
              "New": "Axios HTTP client"
            }
          ],
          "FileNames": [
            "project-alpha/api-server/src/main/java/com/myapp/api/AuthController.java",
            "project-alpha/api-server/src/main/java/com/myapp/service/AuthService.java",
            "project-alpha/web-client/src/app/auth/login/login.component.ts",
            "project-alpha/web-client/src/app/auth/login/login.component.html"
          ]
        }
        
        ## Example Output
        {
          "Files": [
            {
              "Name": "backend/pom.xml",
              "Content": "\n<project ...>\n    \n    <parent>...</parent>\n    <groupId>com.example</groupId>\n    <artifactId>api-server</artifactId>\n    ...\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n    </dependencies>\n    ...\n</project>"
            },
            {
              "Name": "backend/src/main/java/com/myapp/Application.java",
              "Content": "package com.myapp;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}"
            },
            {
              "Name": "frontend/web-client/package.json",
              "Content": "{\n  \"name\": \"web-client\",\n  \"version\": \"0.0.1\",\n  \"description\": \"TODO: Please update the project description.\",\n  \"scripts\": { ... },\n  \"dependencies\": {\n    \"@angular/common\": \"^18.2.0\",\n    \"@angular/core\": \"^18.2.0\",\n    \"@angular/forms\": \"^18.2.0\",\n    \"axios\": \"^1.7.2\",\n    ...\n  },\n  \"devDependencies\": { ... }\n}"
            },
            {
            {
              "Name": "frontend/src/app/app.routes.ts",
              "Content": "import { Routes } from '@angular/router';\nimport { LoginComponent } from './auth/login/login.component';\n\nexport const routes: Routes = [\n    { path: 'login', component: LoginComponent }\n];"
            }
          ]
        }
        """;
}